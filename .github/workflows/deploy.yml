# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NODE_VERSION: 20.x

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    environment: production
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Run tests
      - name: Run Tests on Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}    
      - run: |
          cd app/
          echo "ENCRYPT_KEY=${{ secrets.ENCRYPT_KEY }}" >> .env
          npm i
          npm run vitest run  

      - name: Build & Restart server
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SK }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Git pull"
            cd ${{ secrets.DEPLOY_DIR }}
            git pull origin main
            echo "OPEN_AI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}" > .env
            echo "GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" >> .env
            echo "PUBLIC_FIREBASE_API_KEY=${{ secrets.PUBLIC_FIREBASE_API_KEY }}" >> .env
            echo "PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> .env
            echo "PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.PUBLIC_FIREBASE_PROJECT_ID }}" >> .env
            echo "PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> .env
            echo "PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
            echo "PUBLIC_FIREBASE_APP_ID=${{ secrets.PUBLIC_FIREBASE_APP_ID }}" >> .env
            echo "PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.PUBLIC_FIREBASE_MEASUREMENT_ID }}" >> .env
            echo "FIREBASE_ADMIN_EMAIL=${{ secrets.FIREBASE_ADMIN_EMAIL }}" >> .env
            echo "FIREBASE_ADMIN_PASSWD=${{ secrets.FIREBASE_ADMIN_PASSWD }}" >> .env
            echo "ENCRYPT_KEY=${{ secrets.ENCRYPT_KEY }}" >> .env
            echo "MEDIA_PATH=${{ secrets.MEDIA_PATH }}" >> .env
            echo "LOG_PATH=${{ secrets.LOG_PATH }}" >> .env
            echo "NPM_CACHE=${{ secrets.NPM_CACHE }}" >> .env
            echo "HOST=${{ secrets.HOST }}" >> .env
            cp .env ./app/
            echo "service restarting ..."
            docker-compose up -d --build
            docker-compose exec -T briefcast npm ci --cache .npm
            docker-compose exec -T briefcast npm run build
            echo "restart core server ..."
            docker-compose exec -T briefcast_core pkill deno
            nohup docker-compose exec -T briefcast_core ./run_dev.sh > /tmp/briefcast_core.log 2>&1 &
            echo "restart web server ..."
            docker-compose exec -T briefcast pkill npm
            nohup docker-compose exec -T briefcast npm run serve > /tmp/briefcast.log 2>&1 &
